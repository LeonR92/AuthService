version: "3.8"

services:
  app:
    image: python:3.11
    container_name: my_python_app
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - WRITE_DATABASE_URL=postgresql://user:password@postgres-primary:5432/mydb
      - READ_DATABASE_URL=postgresql://user:password@haproxy:5432/mydb
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=asd7612..asdkaksd@!^%asd
    expose:
      - "8080"
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2
      - postgres-replica-3
      - haproxy
      - redis
    command: >
      sh -c "pip install uv && uv pip install --system --requirements pyproject.toml && python -m core.init_db && gunicorn -w 4 -b 0.0.0.0:8080 app:app"
    networks:
      - frontend
      - backend

  postgres-primary:
    image: postgres:15
    container_name: postgres-primary
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    expose:
      - "5432"
    volumes:
      - pg_primary_data:/var/lib/postgresql/data
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U user -d mydb; do sleep 1; done
        psql -v ON_ERROR_STOP=1 -U user -d mydb -c \"CREATE ROLE repl_user WITH REPLICATION LOGIN PASSWORD 'repl_password';\"
        echo \"host replication repl_user 0.0.0.0/0 md5\" >> /var/lib/postgresql/data/pg_hba.conf
        echo \"wal_level = replica\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"max_wal_senders = 10\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"max_replication_slots = 10\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"hot_standby = on\" >> /var/lib/postgresql/data/postgresql.conf
        pg_ctl -D /var/lib/postgresql/data -m fast -w stop
        exec postgres
      "
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  postgres-replica-1:
    image: postgres:15
    container_name: postgres-replica-1
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    expose:
      - "5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    volumes:
      - pg_replica_data_1:/var/lib/postgresql/data
    command: >
      bash -c "
        pg_ctl -D /var/lib/postgresql/data -m fast -w stop || true
        rm -rf /var/lib/postgresql/data/*
        PGPASSWORD=repl_password pg_basebackup -h postgres-primary -U repl_user -D /var/lib/postgresql/data -Fp -Xs -P -R
        chmod 700 /var/lib/postgresql/data
        touch /var/lib/postgresql/data/standby.signal
        echo \"primary_conninfo = 'host=postgres-primary port=5432 user=repl_user password=repl_password application_name=replica1'\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"hot_standby = on\" >> /var/lib/postgresql/data/postgresql.conf
        exec postgres
      "
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  postgres-replica-2:
    image: postgres:15
    container_name: postgres-replica-2
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    expose:
      - "5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    volumes:
      - pg_replica_data_2:/var/lib/postgresql/data
    command: >
      bash -c "
        pg_ctl -D /var/lib/postgresql/data -m fast -w stop || true
        rm -rf /var/lib/postgresql/data/*
        PGPASSWORD=repl_password pg_basebackup -h postgres-primary -U repl_user -D /var/lib/postgresql/data -Fp -Xs -P -R
        chmod 700 /var/lib/postgresql/data
        touch /var/lib/postgresql/data/standby.signal
        echo \"primary_conninfo = 'host=postgres-primary port=5432 user=repl_user password=repl_password application_name=replica2'\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"hot_standby = on\" >> /var/lib/postgresql/data/postgresql.conf
        exec postgres
      "
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  postgres-replica-3:
    image: postgres:15
    container_name: postgres-replica-3
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    expose:
      - "5432"
    depends_on:
      postgres-primary:
        condition: service_healthy
    volumes:
      - pg_replica_data_3:/var/lib/postgresql/data
    command: >
      bash -c "
        pg_ctl -D /var/lib/postgresql/data -m fast -w stop || true
        rm -rf /var/lib/postgresql/data/*
        PGPASSWORD=repl_password pg_basebackup -h postgres-primary -U repl_user -D /var/lib/postgresql/data -Fp -Xs -P -R
        chmod 700 /var/lib/postgresql/data
        touch /var/lib/postgresql/data/standby.signal
        echo \"primary_conninfo = 'host=postgres-primary port=5432 user=repl_user password=repl_password application_name=replica3'\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"hot_standby = on\" >> /var/lib/postgresql/data/postgresql.conf
        exec postgres
      "
    user: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  haproxy:
    image: haproxy:2.7
    container_name: haproxy
    restart: always
    depends_on:
      postgres-replica-1:
        condition: service_healthy
      postgres-replica-2:
        condition: service_healthy
      postgres-replica-3:
        condition: service_healthy
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    expose:
      - "5432"
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - 80:80
    depends_on:
      - app
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend

volumes:
  pg_primary_data:
  pg_replica_data_1:
  pg_replica_data_2:
  pg_replica_data_3:
  redis_data:

networks:
  frontend:
  backend: